// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  phone        String   @unique
  password     String?
  avatar       String?
  nickName     String?
  isAdmin      Boolean  @default(false)
  code         String?  @unique
  invitationId Int?
  card         Bank?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[] // Relationship to orders
  balance      Decimal
  totalEarning Decimal
  team         team[]

  earnings     earnings[]
}

model News {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  slug      String   @unique
  body      String?
  image     String?
  featured  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bank {
  id        Int      @id @default(autoincrement())
  name      String
  bank      String
  ifsc      String
  account   String
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  title        String
  content      String?
  published    Boolean  @default(false)
  name         String
  price        Float
  days         Int
  rate         Float
  percent      Float    @default(0)
  totalRevenue Float
  dayProfit    Float
  quantity     Float
  image        String?
  orders       Order[] // Relationship to orders
 
}

model Order {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  quantity   Float
  totalPrice Float
  coupon     Coupon?  @relation(fields: [couponId], references: [id])
  couponId   Int?
}

model Coupon {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  discount   Float
  validUntil DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  orders     Order[] // Relationship to orders
}

model test {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
}

model Deposit {
  id             Int      @id @default(autoincrement())
  balance        Int
  paymentChannel String
  transactionId  String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         Int
  status         Boolean
  // user            User    @relation(fields: [userId], references: [id])
}

model Withdrew {
  id             Int      @id @default(autoincrement())
  amount         Float // Updated to use Float instead of Int for decimal values
  username       String
  walletId       String
  paymentChannel String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         Int
  status         Boolean
}

model team {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [fromId], references: [id])
  userId    Int
  fromId    Int
  level     String
  amount    Float
}

model myteam {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
 
  userId    Int
  invitedbyId  Int
  level     String
}

model earnings {
  id        Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  amount    Float
  createdAt DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
